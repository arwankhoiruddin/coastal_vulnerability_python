#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jul 15 10:26:33 2024

@author: arwan
"""

import ee
import geemap
import numpy as np
import matplotlib.pyplot as plt
import folium
import requests
from io import BytesIO

ee.Authenticate()
ee.Initialize(project='ee-arwankhoiruddin-coastal')

demnas = ee.Image('users/fajarlapanrs/Coastal_Vulnerability_Assessment/DEMNAS_Compress')
batnas = ee.Image("users/fajarlapanrs/Coastal_Vulnerability_Assessment/BATNAS_V_1_5_Crop")
MTR = ee.Image("users/fajarlapanrs/Coastal_Vulnerability_Assessment/Mean_Tidal_Range_Java_Indonesia")
MSWH = ee.Image("users/fajarlapanrs/Coastal_Vulnerability_Assessment/Sea_Wave_Height_Java_Indonesia")
LS = ee.Image("users/fajarlapanrs/Coastal_Vulnerability_Assessment/Landsubsidence_2016_2021")
SC = ee.Image("users/fajarlapanrs/Coastal_Vulnerability_Assessment/DSAS_LRR_SC_Rev3")
newfc = ee.FeatureCollection("users/fajarlapanrs/Coastal_Vulnerability_Assessment/APoly_sample_KerPesisir_3")
Box = ee.FeatureCollection("users/fajarlapanrs/Coastal_Vulnerability_Assessment/ABox2")
Geol = ee.Image("users/fajarlapanrs/Coastal_Vulnerability_Assessment/AClass_Lithologi_Gap1")
dataset_landform = ee.Image("users/fajarlapanrs/Coastal_Vulnerability_Assessment/04_Landforms_Coast_Java_Indonesia_rev1")
MSL = ee.Image("users/fajarlapanrs/Coastal_Vulnerability_Assessment/AMSL_INA")
originalBox = ee.FeatureCollection("users/fajarlapanrs/Coastal_Vulnerability_Assessment/ABox2")
dataset_lulc = ee.ImageCollection("ESA/WorldCover/v100")
gfd = ee.ImageCollection('GLOBAL_FLOOD_DB/MODIS_EVENTS/V1').sum().float()

# Limit to only Jakarta, West Java and Banten
geometry = ee.Geometry.Polygon(
    [[[105.79298045315488, -5.8361473244074675],
      [105.79298045315488, -6.400083757565067],
      [107.50822093167051, -6.400083757565067],
      [107.50822093167051, -5.8361473244074675]]]
)

target_resolution = 8
latitude = -6.133392
longitude = 106.624449
zoom = 10  # Adjust the zoom level as needed

# Create a folium map centered at the specified coordinates
mymap = folium.Map(location=[latitude, longitude], zoom_start=zoom)


# Clip each feature in the originalBox collection to the boundary of the geometry
Box = originalBox.map(lambda feature: feature.intersection(geometry, ee.ErrorMargin(1)))


"""
Variables:

    * elevation
    * slope
    * bathymetry
    * shoreline change
    * land cover
    * land use
    * mean sea level
    * mean tidak range
    * mean significant wave height
    * coastal inundation
    * land subsidence
    * geology
""" 

# elevation
elevation = demnas.clipToCollection(Box).select('b1').rename('elevation').float()

# slope
slope = ee.Terrain.slope(elevation).rename('slope').float()

# bathymetry
bathymetry = batnas.clipToCollection(Box).select('b1').rename('bathymetry').float()

# shoreline change
shoreline_change = SC.clipToCollection(Box).select('b1').rename('shoreline_change').float()

# land cover
landcover = dataset_lulc.first().clipToCollection(Box).select('Map').rename('landcover').float()

# land use
land_forms = dataset_landform.clipToCollection(Box).select('b1').rename('land_forms').float()

# mean sea level
mean_sea_level = MSL.clipToCollection(Box).select('b1').rename('mean_sea_level').float()

# mean tidal range
mean_tidal_range = MTR.clipToCollection(Box).select('b1').rename('mean_tidal_range').float()

# mean significant wave height
mean_significant_wave_height = MSWH.clipToCollection(Box).select('b1').rename('mean_significant_wave_height').float()

# coastal inundation
coastal_inundation = gfd.clipToCollection(Box).select('flooded').rename('inundation').float()

# land subsidence
land_subsidence = LS.clipToCollection(Box).select('b1').rename('land_subsidence').float()

# geology
geology = Geol.clipToCollection(Box).select('b1').rename('geology').float()

#####
# combine

gdl = ee.Image.cat(
        elevation,
        slope,
        bathymetry,
        shoreline_change,
        landcover,
        land_forms,
        mean_sea_level,
        mean_tidal_range,
        mean_significant_wave_height,
        coastal_inundation,
        land_subsidence,
        geology
    )

bands = [
        'elevation',
        'slope',
        'bathymetry',
        'shoreline_change',
        'landcover',
        'land_forms',
        'mean_sea_level',
        'mean_tidal_range',
        'mean_significant_wave_height',
        'inundation',
        'land_subsidence',
        'geology'
    ]

#####
# train

training = gdl.select(bands).sampleRegions(
        collection=newfc,
        properties=['ID_CVA'],
        scale=10
    )


training = training.randomColumn('random')

split = 0.7
training_sample = training.filter(ee.Filter.lt('random', split))
validation_sample = training.filter(ee.Filter.gte('random', split))

print('Training sample: ', training_sample.size().getInfo())
print('Validation sample: ', validation_sample.size().getInfo())

# Train the classifier.
trained_classifier = ee.Classifier.smileKNN().train(
#trained_classifier = ee.Classifier.smileGradientTreeBoost(100).train(
#trained_classifier = ee.Classifier.smileNaiveBayes().train(
#trained_classifier = ee.Classifier.minimumDistance().train(
#trained_classifier = ee.Classifier.smileCart(100).train(
#trained_classifier = ee.Classifier.smileRandomForest(100).train(
#trained_classifier = ee.Classifier.libsvm().train(
    features=training_sample,
    classProperty='ID_CVA',
    inputProperties=bands
)

# Classify the validation sample.
classified = validation_sample.classify(trained_classifier)
validation_sample = validation_sample.classify(trained_classifier)

# Evaluation
train_accuracy = trained_classifier.confusionMatrix()
print('Train accuracy : ', train_accuracy.accuracy().getInfo())

validation_accuracy = validation_sample.errorMatrix('ID_CVA', 'classification')
print('Validation accuracy: ', validation_accuracy.accuracy().getInfo())