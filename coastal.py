#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jun 13 11:44:37 2024

@author: arwan
"""

import ee
import geemap
import numpy as np
import matplotlib.pyplot as plt
import folium
import requests
from io import BytesIO

ee.Authenticate()
ee.Initialize(project='ee-arwankhoiruddin-coastal')

def convert_and_show(map_image):
  np_img = geemap.ee_to_numpy(map_image)
  rgb_img_test = (255 * ((np_img[:, :, :]) / np.max(np_img))).astype("uint8")
  plt.imshow(rgb_img_test)
  plt.show()

# Define a method for displaying Earth Engine image tiles on a folium map.
def add_ee_layer(self, ee_object, vis_params, name):
    
    try:    
        # display ee.Image()
        if isinstance(ee_object, ee.image.Image):    
            map_id_dict = ee.Image(ee_object).getMapId(vis_params)
            folium.raster_layers.TileLayer(
            tiles = map_id_dict['tile_fetcher'].url_format,
            attr = 'Google Earth Engine',
            name = name,
            overlay = True,
            control = True
            ).add_to(self)
        # display ee.ImageCollection()
        elif isinstance(ee_object, ee.imagecollection.ImageCollection):    
            ee_object_new = ee_object.mosaic()
            map_id_dict = ee.Image(ee_object_new).getMapId(vis_params)
            folium.raster_layers.TileLayer(
            tiles = map_id_dict['tile_fetcher'].url_format,
            attr = 'Google Earth Engine',
            name = name,
            overlay = True,
            control = True
            ).add_to(self)
        # display ee.Geometry()
        elif isinstance(ee_object, ee.geometry.Geometry):    
            folium.GeoJson(
            data = ee_object.getInfo(),
            name = name,
            overlay = True,
            control = True
        ).add_to(self)
        # display ee.FeatureCollection()
        elif isinstance(ee_object, ee.featurecollection.FeatureCollection):  
            ee_object_new = ee.Image().paint(ee_object, 0, 2)
            map_id_dict = ee.Image(ee_object_new).getMapId(vis_params)
            folium.raster_layers.TileLayer(
            tiles = map_id_dict['tile_fetcher'].url_format,
            attr = 'Google Earth Engine',
            name = name,
            overlay = True,
            control = True
        ).add_to(self)
    
    except:
        print("Could not display {}".format(name))
    
# Add EE drawing method to folium.
folium.Map.add_ee_layer = add_ee_layer

def reproject(original_object, target_resolution):
    return original_object.reproject(
        crs=original_object.projection().crs(),
        scale=target_resolution
    ).float()


def get_array_from_ee_image(ee_image, roi):
    url = ee_image.getDownloadURL({
        'scale': 30,
        'region': roi.getInfo(),
        'format': 'NPY'})
    response = requests.get(url)
    return np.load(BytesIO(response.content))


img = ee.Image("LANDSAT/LC08/C01/T1_SR/LC08_038029_20180810").select(["B4", "B5", "B6"])

aoi = ee.Geometry.Polygon(
    [[[-110.8, 44.7], [-110.8, 44.6], [-110.6, 44.6], [-110.6, 44.7]]], None, False
)

rgb_img = geemap.ee_to_numpy(img, region=aoi)



demnas = ee.Image('users/fajarlapanrs/Coastal_Vulnerability_Assessment/DEMNAS_Compress')
batnas = ee.Image("users/fajarlapanrs/Coastal_Vulnerability_Assessment/BATNAS_V_1_5_Crop");
MTR = ee.Image("users/fajarlapanrs/Coastal_Vulnerability_Assessment/Mean_Tidal_Range_Java_Indonesia");
MSWH = ee.Image("users/fajarlapanrs/Coastal_Vulnerability_Assessment/Sea_Wave_Height_Java_Indonesia");
LS = ee.Image("users/fajarlapanrs/Coastal_Vulnerability_Assessment/Landsubsidence_2016_2021");
SC = ee.Image("users/fajarlapanrs/Coastal_Vulnerability_Assessment/DSAS_LRR_SC_Rev3");
newfc = ee.FeatureCollection("users/fajarlapanrs/Coastal_Vulnerability_Assessment/APoly_sample_KerPesisir_3");
Box = ee.FeatureCollection("users/fajarlapanrs/Coastal_Vulnerability_Assessment/ABox2");
Geol = ee.Image("users/fajarlapanrs/Coastal_Vulnerability_Assessment/AClass_Lithologi_Gap1");
dataset_landform = ee.Image("users/fajarlapanrs/Coastal_Vulnerability_Assessment/04_Landforms_Coast_Java_Indonesia_rev1");
MSL = ee.Image("users/fajarlapanrs/Coastal_Vulnerability_Assessment/AMSL_INA");
originalBox = ee.FeatureCollection("users/fajarlapanrs/Coastal_Vulnerability_Assessment/ABox2")

# Limit to only Jakarta, West Java and Banten
geometry = ee.Geometry.Polygon(
    [[[105.79298045315488, -5.8361473244074675],
      [105.79298045315488, -6.400083757565067],
      [107.50822093167051, -6.400083757565067],
      [107.50822093167051, -5.8361473244074675]]]
)

target_resolution = 8
latitude = -6.133392
longitude = 106.624449
zoom = 10  # Adjust the zoom level as needed

# Create a folium map centered at the specified coordinates
mymap = folium.Map(location=[latitude, longitude], zoom_start=zoom)


# Clip each feature in the originalBox collection to the boundary of the geometry
Box = originalBox.map(lambda feature: feature.intersection(geometry, ee.ErrorMargin(1)))

elevation = demnas.clipToCollection(Box).select('b1').rename('elevation')

reprojected_elevation = reproject(elevation, target_resolution)

filtered_elevation = reprojected_elevation.focal_median(radius=3, units='pixels')



# Define visualization parameters
vis_params = {
    'min': 0,
    'max': 10,
    'palette': ['blue', 'green', 'red']
}

mymap.add_ee_layer(reprojected_elevation, vis_params, 'Reprojected Elevation')
mymap.add_ee_layer(elevation, vis_params, 'Elevation')
mymap.add_ee_layer(filtered_elevation, vis_params, 'Filtered Elevation')

mymap.add_child(folium.LayerControl())

mymap.save('coastal.html')